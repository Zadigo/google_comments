import datetime
import pathlib
from collections import Counter
from typing import Literal, Union

import pandas
from selenium.webdriver import Chrome, Edge

COMMENTS_SCROLL_ATTEMPTS: Literal[500]

FEED_SCROLL_ATTEMPTS: Literal[30]

COMMENTS_SCROLL_WAIT_TIME: Literal[10]


class SpiderMixin:
    collected_businesses: list = ...
    output_folder: pathlib.Path = ...
    output_folder_path: pathlib.Path = ...
    is_running: bool = ...
    start_time: datetime.datetime.now = ...
    comments_scroll_counter: Counter = ...
    feed_scroll_counter: Counter = ...

    def __init__(self, output_folder: str = None) -> None: ...

    @property
    def is_feed_page(self) -> bool: ...
    @property
    def current_page_url(self) -> str: ...

    def flatten(self) -> Union[list, dict]: ...
    def before_launch(self) -> None: ...
    def current_page_actions(self) -> None: ...
    def after_fail(self, exception: str = ...) -> None: ...
    def completion_percentage(self, total_count) -> str: ...
    def check_address(self, model, address) -> None: ...
    def test_current_scroll_repetition(
        self, 
        counter: Counter, 
        current_scroll: int, 
        limit: int = ...
    ) -> bool: ...
    def scroll_feed(self) -> None: ...
    def click_consent(self) -> bool: ...
    def start_spider(self, url: str): ...


class GoogleMapsMixin(SpiderMixin):
    COMMENTS: list = ...
    scrap_session_id: str = ...
    driver: Union[Chrome, Edge] = ...
    collect_reviews: bool = ...
    keep_unique_file: bool = ...
    seen_urls_outputted: bool = ...
    filename: str = ...
    is_loop: bool = ...

    def __init__(
        self,
        output_folder: str = ..., 
        headless: bool = ...
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __del__(self) -> None: ...
    def __hash__(self) -> str: ...

    def sort_comments(self) -> None: ...
    def create_comments_dataframe(
        self, 
        *, 
        save: bool = ..., 
        columns: list[str] = ...
    ) -> pandas.DataFrame: ...

    def create_files(self, business, filename: str) -> None: ...
    def start_spider(self, url: str) -> None: ...


class GooglePlaces(GoogleMapsMixin):
    def get_dataframe(self) -> pandas.Dataframe: ...
    def start_spider(self, url: str) -> None: ...


class GooglePlace(GoogleMapsMixin):
    def start_spider(
        self, 
        url: str,
        comments_scroll_attempts: int = None,
        url_business_id: str = None,
        is_loop: bool = ...,
        maximize_window: bool = ...
    ) -> None: ...
    def iterate_urls(
        self,
        comments_scroll_attempts: int = None,
        urls: list[Union[str, dict[str, str]]] = ...
    ) -> None: ...
